# vim: ft=conf
#
# CUSTOM COMMANDS FOR LF that will usually involve also creating
# mappings for them
# See last part of file for examples in cmds

cmd trash %set -f; mv $fx ~/.trash

cmd z %{{
	result="$(zoxide query --exclude $PWD "$@")"
	lf -remote "send $id cd '$result'"
}}

cmd zi ${{
	result="$(zoxide query -i)"
	lf -remote "send $id cd '$result'"
}}

map zi zi

cmd fr $ fr

cmd fzf ${{
	result="$( dirname $(find $PWD | fzf) )"
	lf -remote "send $id cd '$result'"
}}
map <c-g> fzf


cmd on-cd &{{
        zoxide add "$PWD"
}}
map D delete


cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

map <c-y> :yank-path
map y
map yy :copy
map yd :yank-dirname


cmd yank-basename-without-extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' |
      if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
      xclip -i -selection clipboard
}}


cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

map x
map x extract

cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
map gb bottom

cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

map C edit-config


cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

map cW bulk-rename


cmd touch %{{
    IFS=" "
    touch -- "$*"
    lf -remote "send $id select \"$*\""
}}

map t
map to push :touch<space>
map W &ripdrag --all $fx
map s& push &<space>$f<left><left><left>

cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}
map gL follow_link



# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $f in
      *.desktop) setsid -f dex $fx >/dev/null 2>&1;exit 0 ;;
    esac

    case $(file --mime-type -Lb $f) in
        text/csv) lf -remote "send $id \$ sc-im \$fx";;
        text/*|application/json|application/javascript) lf -remote "send $id \$$EDITOR \$fx";;
        application/pdf) setsid -f sioyek $fx >/dev/null 2>&1 ;;
        *)
          case $f in
            *.pptx) setsid -f zaread $fx >/dev/null 2>&1 ;;
            *.desktop) setsid -f dex $fx >/dev/null 2>&1 ;;
            *.zip) lf -remote "send $id \$ unzip -l \$f | less";;
            *.webm) setsid -f mpv $fx >/dev/null 2>&1 ;;
            *.epub|*.azw3) setsid -f foliate $fx >/dev/null 2>&1 ;;
            *.sc) lf -remote "send $id \$ sc-im \$f";;
            # *.png|*.jpeg|*.jpg) lf -remote "send $id \$ vimiv \$f";;
            *.png|*.jpeg|*.jpg) setsid -f vimiv $fx >/dev/null 2>&1 ;;
            *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
          esac
    esac
}}

# mkdir command. See wiki if you want it to select created dir

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd follow-link %{{
  lf -remote "send $id select \"$(readlink -- "$f" | sed 's/\\/\\\\/g;s/"/\\"/g')\""
}}

map gL follow-link

# y (select for copy) and P to paste symlink
# d (select for cut) and P to paste hard link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echoerr no files to link"
        exit
    fi
    case "$mode" in
        # 'copy' mode indicates a symlink
        copy)
          if [ -e "$PWD/$(basename "$@")" ]; then
              echo -n "File exists. Enter new filename: "
              read new_name
              ln -sr "$@" "./$new_name"
          else
              ln -sr -t . -- "$@"
          fi
        ;;
        # while 'move' mode indicates a hard link
        move)
            ln -t . -- "$@"
            lf -remote "send clear"
            ;;
    esac
}}

map P :link
